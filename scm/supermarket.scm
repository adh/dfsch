;; This is typical assignment from introductory courses on operating systems
;; (and good test for dfsch's multithreading support)

(define free-tellers (channel:create))
(define io (mutex:create))

(define (teller max-customers)
  (let ((my-id (gensym)) (my-channel (channel:create)))
    (let main-loop ((iter max-customers))
      (channel:write free-tellers (cons my-channel my-id))
      
      (letrec ((cust-data (channel:read my-channel))
               (customer (car cust-data))
               (cust-channel (car customer))
               (cust-id (cdr customer))
               (cust-items (cdr cust-data))
               (sum 0))

        (print "teller " my-id " got customer " cust-id)

        (for-each (lambda (item) 
                    (let ((name (vector-ref item 0))
                          (price (vector-ref item 1)))
                      (print "teller " my-id " item " name " @ " price)
                      (set! sum (+ sum price))))
                  cust-items)

        (print "teller " my-id " sum is " sum)
        (channel:write cust-channel sum)
        (letrec ((payment (channel:read my-channel))
                 (return (- payment sum)))
          (print "teller " my-id " received " payment " returning " return)
          (channel:write cust-channel return)
          ))
      
      (when (< iter max-customers)
            (main-loop (- max-customers 1))))))

(define (customer items)
  (let ((my-id (gensym)) 
        (my-channel (channel:create)))
    (letrec ((teller (channel:read free-tellers))
             (teller-channel (car teller))
             (teller-id (cdr teller)))
    
      (print "customer " my-id " got teller " teller-id)
      (channel:write teller-channel 
                     (cons (cons my-channel my-id) 
                           items))

      (letrec ((sum (channel:read my-channel))
               (pay (* sum 1.10)))
        (print "customer " my-id " sum is " sum " paying " pay)
        (channel:write teller-channel pay)
        (let ((return (channel:read my-channel)))
          (print "customer " my-id " got " return " back, going home"))))))

(thread:create teller '(10))
(thread:create teller '(10))
(thread:create teller '(10))

(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))
(thread:create customer '((#(foo 10) #(bar 20) #(quux 30))))

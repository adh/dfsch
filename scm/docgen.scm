#!/usr/bin/env dfsch-repl
; documentation generator for dfsch

(require 'introspect)
(require 'sxml)
(require 'inet)
(require 'cmdopts)
(require 'unix)

(define (directory? path)
  (let ((stat (unix:stat path)))
    (if (null? stat)
        ()
        (stat 'isdir))))

(define (ensure-directory path)
  (unless (directory? path)
          (unix:mkdir path 0755)))

(define *clean-toplevel* (make-default-environment))

(define (get-toplevel-variables)
  (get-variables *clean-toplevel*))

(define (get-object-documentation object)
  (cond
   ((instance? object <function>)
    (slot-ref object 'documentation))
   ((instance? object <form>)
    (slot-ref object 'documentation))
   ((instance? object <macro>)
    (get-object-documentation (slot-ref object 'procedure)))
   (else ())))

(define (make-counter)
  (let ((count 0))
    (lambda ()
      (set! count (+ 1 count))
      count)))

(define *id-counter* (make-counter))

(define (make-entry name typename documentation object)
  (vector name 
          typename 
          documentation 
          (format "~y" object)))
(define (entry-name entry)
  (vector-ref entry 0))
(define (entry-type-name entry)
  (vector-ref entry 1))
(define (entry-id entry)
  (format "it~x" (id entry)))
(define (entry-documentation entry)
  (vector-ref entry 2))
(define (entry-documentation-string entry)
  (or (entry-documentation entry)
      ""))
(define (entry-value entry)
  (vector-ref entry 3))

(define (variables->name+doc lyst)
  (let ((id-counter (make-counter)))
    (sort-entries
     (map 
      (lambda (x) 
        (let ((name (car x))
              (value (cadr x)))
          (make-entry (symbol->string name) 
                      (type-name (type-of value))
                      (get-object-documentation value)
                      value)))
      lyst))))

(define (sort-entries lyst)
  (sort-list! lyst
             (lambda (x y)
               (string<? (entry-name x)
                         (entry-name y)))))

(define (documented-only lyst)
  (filter (lambda (entry) (entry-documentation entry)) lyst))

(define (make-index-list list link-to target)
  `((ul ,@(map (lambda (item)
                 (let ((name (entry-name item))
                       (type-name (entry-type-name item))
                       (id (entry-id item)))
                   `(li (a (@ (href ,(string-append link-to "#" id))
                              ,@(unless (null? target)
                                        `((target ,target))))
                           ,name)
                        " " ,type-name)))
               list))))

(define (make-documentation-body lyst)
  (map (lambda (item)
         (let ((name (entry-name item))
               (type (entry-type-name item))
               (id (entry-id item)))
           `(div (@ (id ,id) (title ,name))
                 (h2 ,(string-append type " " name))
                 (pre ,(entry-value item))
                 (p ,(entry-documentation-string item)))))
       lyst))

(define (html-frameset title)
  `(html 
    (@ (xmlns "http://www.w3.org/1999/xhtml"))
    (head ,@(when (not (null? title))
                  `((title ,title))))
    (frameset (@ (cols "250,*"))
     (frame (@ (name "index") (src "index-doc.html")))
     (frame (@ (name "body") (src "body-doc.html"))))))

(define (html-boiler-plate title infoset)
  `(html 
    (@ (xmlns "http://www.w3.org/1999/xhtml"))
    (head ,@(when (not (null? title))
                  `((title ,title))))
    (body ,@(when (not (null? title))
                  `((h1 ,title)))
          ,@infoset
          (p "Generated by docgen.scm running on dfsch " ,*dfsch-version*))))


(define (index-menu all?)
  (if all?
      '(p "Show: " (strong "all") " " 
          (a (@ (href "index-doc.html")) "documented"))
      '(p "Show: " (a (@ (href "index-all.html")) "all") 
          " " (strong "documented"))))



(define (emit-documentation lyst directory title)
  (let ((doc-only (documented-only lyst)))
    (ensure-directory directory)
    (sxml:emit-file (html-frameset title) 
                    (string-append directory "/index.html"))
    (sxml:emit-file (html-boiler-plate 
                     ()
                     (cons 
                      (index-menu #t)
                      (make-index-list lyst "body-all.html" "body")))
                    (string-append directory "/index-all.html"))
    (sxml:emit-file (html-boiler-plate 
                     ()
                     (cons 
                      (index-menu #f)
                      (make-index-list doc-only "body-doc.html" "body")))
                    (string-append directory "/index-doc.html"))
    (sxml:emit-file (html-boiler-plate 
                     title
                     (make-documentation-body lyst))
                    (string-append directory "/body-all.html"))
    (sxml:emit-file (html-boiler-plate 
                     title
                     (make-documentation-body doc-only))
                    (string-append directory "/body-doc.html"))))
  

(define (emit-core-documentation directory)
  (emit-documentation 
   (variables->name+doc (get-toplevel-variables))
   directory
   "Default dfsch top-level environment"))

(when (defined? *posix-argv*)
      (emit-core-documentation (cadr *posix-argv*)))

